
//RIAStudio client runtime widget - DGrid

define([
	"rias",
	"dgrid/List",
	"dgrid/OnDemandGrid",
	//"dgrid/Grid",
	//"dgrid/_StoreMixin",
	"dgrid/CellSelection",
	"dgrid/ColumnSet",
	"dgrid/Editor",
	"dgrid/GridFromHtml",
	"dgrid/GridWithColumnSetsFromHtml",
	"dgrid/Keyboard",
	"dgrid/Selection",
	"dgrid/Selector",
	"dgrid/Tree",
	"dgrid/extensions/ColumnHider",
	"dgrid/extensions/ColumnResizer",
	"dgrid/extensions/ColumnReorder",
	"dgrid/extensions/CompoundColumns",
	"dgrid/extensions/DijitRegistry",
	"dgrid/extensions/Dnd",
	"dgrid/extensions/Pagination"
], function(rias, List, //getGridXRiasd,
			_Widget, CellSelection, ColumnSet, Editor,
			GridFromHtml, GridWithColumnSetsFromHtml, Keyboard, Selection, Selector, Tree,
			ColumnHider, ColumnResizer, ColumnReorder, CompoundColumns, DijitRegistry, Dnd, Pagination) {

	rias.theme.loadCss([
		"dgrid/dgrid.css"
	]);

	var autoId = 0;
	function generateId() {
		return "riaswDGrid_" + autoId++;
	}

	List.extend({

		postscript: function(/*Object?*/params, /*DomNode|String*/srcNodeRef){
			var grid = this;

			(this._Row = function (id, object, element) {
				this.id = id;
				this.data = object;
				this.element = element;
			}).prototype.remove = function () {
				grid.removeRow(this.element);
			};

			if (srcNodeRef) {
				// normalize srcNodeRef and store on instance during create process.
				// Doing this in postscript is a bit earlier than dijit would do it,
				// but allows subclasses to access it pre-normalized during create.
				this.srcNodeRef = srcNodeRef = srcNodeRef.nodeType ? srcNodeRef : byId(srcNodeRef);
			}

			this.inherited(arguments);
		},
		create: function (params, srcNodeRef) {
			this._introspect();

			var domNode = this.domNode = srcNodeRef || rias.doc.createElement('div'),
				cls;

			if (params) {
				this.params = params;
				rias.safeMixin(this, params);

				// Check for initial class or className in params or on domNode
				cls = params['class'] || params.className || domNode.className;
			}

			// ensure arrays and hashes are initialized
			this.sort = this.sort || [];
			this._listeners = [];
			this._rowIdToObject = {};

			this.postMixInProperties && this.postMixInProperties();

			// Apply id to widget and domNode,
			// from incoming node, widget params, or autogenerated.
			this.id = domNode.id = domNode.id || this.id || generateId();

			// Perform initial rendering, and apply classes if any were specified.
			this.buildRendering();
			if (cls) {
				//setClass.call(this, cls);
				rias.dom.replaceClass(this.domNode, cls, this._class || '');
				// Store for later retrieval/removal.
				this._class = cls;
			}

			this._applyAttributes();///需要在 buildRendering 之后。
			this.postCreate(params);

			// remove srcNodeRef instance property post-create
			delete this.srcNodeRef;

			this._created = true;

			// to preserve "it just works" behavior, call startup if we're visible
			if (this.domNode.offsetHeight) {
				this.startup();
			}
		},
		postCreate: function () {
			this.inherited(arguments);
		}

	});

	var _WidgetBase = rias.getObject("dijit._WidgetBase");
	var riasType = "rias.riasw.grid.DGrid";
	var Widget = rias.declare(riasType, [_WidgetBase, _Widget, DijitRegistry, Selection, Keyboard, Editor, Tree, Pagination,
		ColumnSet, ColumnHider, ColumnResizer, ColumnReorder], {
	});

	Widget._riasdMeta = {
		visual: true,
		iconClass: "riaswGridIcon",
		iconClass16: "riaswGridIcon16",
		defaultParams: function(params){
			var p = rias.mixinDeep({}, params);

			if(!p.collection){
				if(p.store){
					p.collection = p.store;
					delete p.store;
				}else{
					p.collection = {
						_riaswType: "rias.riasw.store.MemoryStore"
					};
				}
			}

			p = rias.mixinDeep({
				listType: "grid",
				cellNavigation: true,
				tabableHeader: true,
				showHeader: true,
				showFooter: false,

				minRowsPerPage: 25,
				maxRowsPerPage: 250,
				maxEmptySpace: Infinity,
				bufferRows: 10,
				farOffRemoval: 2000,
				queryRowsOverlap: 0,
				pagingMethod: 'debounce',
				pagingDelay: 15,
				keepScrollPosition: false,
				rowHeight: 0,

				collection: null,
				loadingMessage: ""
			}, p);
			return p;
		},
		initialSize: {},
		"property": {
		}
	};

	return Widget;

});